// <auto-generated />
using ExamKing.Database.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExamKing.Database.Migrations.Migrations
{
    [DbContext(typeof(ExamDbContext))]
    [Migration("20201111080311_v0.0.1")]
    partial class v001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0-rc.2.20475.6");

            modelBuilder.Entity("ExamKing.Core.Entites.TbAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("ID");

                    b.Property<string>("CreateTime")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("createTime")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password")
                        .HasComment("密码")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("username")
                        .HasComment("账号")
                        .UseCollation("utf8mb4_unicode_ci")
                        .HasCharSet("utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique();

                    b.ToTable("tb_admin");

                    b
                        .HasComment("管理员表");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = "1603683111",
                            Password = "123456",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbChapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("ID");

                    b.Property<string>("ChapterName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("chapterName")
                        .HasComment("章节名称")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId")
                        .HasComment("课程ID");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("desc")
                        .HasComment("章节描述")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CourseId" }, "chapter_course_id");

                    b.HasIndex(new[] { "Id" }, "chapter_id")
                        .IsUnique();

                    b.ToTable("tb_chapter");

                    b
                        .HasComment("课程章节表");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("ID");

                    b.Property<string>("ClassesName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("classesName")
                        .HasComment("班级名称")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("CreateTime")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("createTime")
                        .HasComment("创建时间")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("DeptId")
                        .HasColumnType("int")
                        .HasColumnName("DeptId")
                        .HasComment("系别ID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeptId" }, "classes_dept_id");

                    b.HasIndex(new[] { "Id" }, "classes_id")
                        .IsUnique();

                    b.ToTable("tb_classes");

                    b
                        .HasComment("班级表");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("ID");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("courseName")
                        .HasComment("课程名称")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("CreateTime")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("createTime")
                        .HasComment("创建时间")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("DeptId")
                        .HasColumnType("int")
                        .HasColumnName("DeptId")
                        .HasComment("系别ID");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacherId")
                        .HasComment("教师ID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeptId" }, "course_dept_id");

                    b.HasIndex(new[] { "Id" }, "course_id")
                        .IsUnique();

                    b.HasIndex(new[] { "TeacherId" }, "course_teacher_id");

                    b.ToTable("tb_course");

                    b
                        .HasComment("课程表");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbCourseclass", b =>
                {
                    b.Property<int>("ClassesId")
                        .HasColumnType("int")
                        .HasColumnName("classesId")
                        .HasComment("班级ID");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId")
                        .HasComment("课程ID");

                    b.HasKey("ClassesId", "CourseId");

                    b.HasIndex(new[] { "ClassesId" }, "courseclasses_classes_idx");

                    b.HasIndex(new[] { "CourseId" }, "courseclasses_course_idx");

                    b.ToTable("tb_courseclasses");

                    b
                        .HasComment("课程班级关联表");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbDept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("ID");

                    b.Property<string>("CreateTime")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("createTime")
                        .HasComment("创建时间")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("deptName")
                        .HasComment("系别名称")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "dept_id")
                        .IsUnique();

                    b.ToTable("tb_dept");

                    b
                        .HasComment("系别表");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("ID");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId")
                        .HasComment("课程ID");

                    b.Property<string>("CreateTime")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("createTime")
                        .HasComment("创建时间")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration")
                        .HasComment("考试时长");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("endTime")
                        .HasComment("结束时间")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("examName")
                        .HasComment("试卷名称")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("ExamScore")
                        .HasColumnType("int")
                        .HasColumnName("examScore")
                        .HasComment("试卷总分");

                    b.Property<string>("IsEnable")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("isEnable")
                        .HasComment("启用状态")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("IsFinish")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("isFinish")
                        .HasComment("结束状态")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("JudgeScore")
                        .HasColumnType("int")
                        .HasColumnName("judgeScore")
                        .HasComment("是非题分值");

                    b.Property<string>("Judges")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("judges")
                        .HasComment("是非题")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("SelectScore")
                        .HasColumnType("int")
                        .HasColumnName("selectScore")
                        .HasComment("多选题分值");

                    b.Property<string>("Selects")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("selects")
                        .HasComment("多选题")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("SingleScore")
                        .HasColumnType("int")
                        .HasColumnName("singleScore")
                        .HasComment("单选题分值");

                    b.Property<string>("Singles")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("singles")
                        .HasComment("单选题")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("startTime")
                        .HasComment("开始时间")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacherId")
                        .HasComment("教师ID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CourseId" }, "exam_course_id");

                    b.HasIndex(new[] { "Id" }, "exam_id")
                        .IsUnique();

                    b.HasIndex(new[] { "TeacherId" }, "exam_teacher_id");

                    b.ToTable("tb_exam");

                    b
                        .HasComment("试卷表");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbExamclass", b =>
                {
                    b.Property<int>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("examId")
                        .HasComment("试卷ID");

                    b.Property<int>("ClassesId")
                        .HasColumnType("int")
                        .HasColumnName("classesId")
                        .HasComment("班级ID");

                    b.HasKey("ExamId", "ClassesId");

                    b.HasIndex(new[] { "ClassesId" }, "examclasses_classes_idx");

                    b.HasIndex(new[] { "ExamId" }, "examclasses_exam_idx");

                    b.ToTable("tb_examclasses");

                    b
                        .HasComment("试卷班级关联表");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbJudge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("ID");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("answer")
                        .HasComment("答案")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("ChapterId")
                        .HasColumnType("int")
                        .HasColumnName("chapterId")
                        .HasComment("课程章节ID");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId")
                        .HasComment("课程ID");

                    b.Property<string>("CreateTime")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("createTime")
                        .HasComment("创建时间")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Ideas")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("ideas")
                        .HasComment("解题思路")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("question")
                        .HasComment("题目")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacherId")
                        .HasComment("教师ID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ChapterId" }, "judge_chapter_id");

                    b.HasIndex(new[] { "Id" }, "judge_id")
                        .IsUnique();

                    b.HasIndex(new[] { "CourseId" }, "judge_source_id");

                    b.HasIndex(new[] { "TeacherId" }, "judge_teacher_id");

                    b.ToTable("tb_judge");

                    b
                        .HasComment("是非题表");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbQuestiontype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("ID");

                    b.Property<string>("CreateTime")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("createTime")
                        .HasComment("创建时间")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("typeName")
                        .HasComment("题型名称")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "questiontype_id")
                        .IsUnique();

                    b.ToTable("tb_questiontype");

                    b
                        .HasComment("题型实体");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbSelect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("ID");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("answer")
                        .HasComment("答案")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("ChapterId")
                        .HasColumnType("int")
                        .HasColumnName("chapterId")
                        .HasComment("课程章节ID");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId")
                        .HasComment("课程ID");

                    b.Property<string>("CreateTime")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("createTime")
                        .HasComment("创建时间")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Ideas")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("ideas")
                        .HasComment("解题思路")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("IsSingle")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("isSingle")
                        .HasComment("是否单选")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("OptionA")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("optionA")
                        .HasComment("选项A")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("OptionB")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("optionB")
                        .HasComment("选项B")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("OptionC")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("optionC")
                        .HasComment("选项C")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("OptionD")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("optionD")
                        .HasComment("选项D")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("question")
                        .HasComment("问题")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacherId")
                        .HasComment("教师ID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ChapterId" }, "select_chapter_id");

                    b.HasIndex(new[] { "Id" }, "select_id")
                        .IsUnique();

                    b.HasIndex(new[] { "CourseId" }, "select_source_id");

                    b.HasIndex(new[] { "TeacherId" }, "select_teacher_id");

                    b.ToTable("tb_select");

                    b
                        .HasComment("选择题表");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbStuanswerdetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("ID");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("answer")
                        .HasComment("正确答案")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("CreateTime")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("createTime")
                        .HasComment("创建时间")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("examId")
                        .HasComment("试卷ID");

                    b.Property<string>("Isright")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("isright")
                        .HasComment("是否正确")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("QuesionTypeld")
                        .HasColumnType("int")
                        .HasColumnName("quesionTypeld")
                        .HasComment("题型ID");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("questionId")
                        .HasComment("题目ID");

                    b.Property<int>("StuId")
                        .HasColumnType("int")
                        .HasColumnName("stuId")
                        .HasComment("学生ID");

                    b.Property<string>("Stuanswer")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("stuanswer")
                        .HasComment("学生答案")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ExamId" }, "answerdetail_exam_id");

                    b.HasIndex(new[] { "QuesionTypeld" }, "answerdetail_quesiotype_id");

                    b.HasIndex(new[] { "StuId" }, "answerdetail_stu_id");

                    b.HasIndex(new[] { "Id" }, "stuanseerdetail_id")
                        .IsUnique();

                    b.ToTable("tb_stuanswerdetail");

                    b
                        .HasComment("答题明细表");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("ID");

                    b.Property<int>("ClassesId")
                        .HasColumnType("int")
                        .HasColumnName("classesId")
                        .HasComment("班级ID");

                    b.Property<string>("CreateTime")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("createTime")
                        .HasComment("创建时间")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("DeptId")
                        .HasColumnType("int")
                        .HasColumnName("deptId")
                        .HasComment("系别ID");

                    b.Property<string>("IdCard")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("idCard")
                        .HasComment("身份证号码")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password")
                        .HasComment("密码")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("sex")
                        .HasComment("性别")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("StuName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("stuName")
                        .HasComment("姓名")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("StuNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("stuNo")
                        .HasComment("学号")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Telphone")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("telphone")
                        .HasComment("联系电话")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClassesId" }, "student_classes_id");

                    b.HasIndex(new[] { "DeptId" }, "student_dept_id");

                    b.HasIndex(new[] { "Id" }, "student_id")
                        .IsUnique();

                    b.ToTable("tb_student");

                    b
                        .HasComment("学生表");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbStuscore", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id")
                        .HasComment("ID");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId")
                        .HasComment("课程ID");

                    b.Property<string>("CreateTime")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("createTime")
                        .HasComment("创建时间")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("examId")
                        .HasComment("考试ID");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score")
                        .HasComment("分数");

                    b.Property<int>("StuId")
                        .HasColumnType("int")
                        .HasColumnName("stuId")
                        .HasComment("学生ID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CourseId" }, "stuscore_course_id");

                    b.HasIndex(new[] { "ExamId" }, "stuscore_exam_id");

                    b.HasIndex(new[] { "Id" }, "stuscore_id")
                        .IsUnique();

                    b.HasIndex(new[] { "StuId" }, "stuscore_stu_id");

                    b.ToTable("tb_stuscore");

                    b
                        .HasComment("学生成绩表");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("ID");

                    b.Property<string>("CreateTime")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("createTime")
                        .HasComment("创建时间")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<int>("DeptId")
                        .HasColumnType("int")
                        .HasColumnName("DeptId")
                        .HasComment("系别ID");

                    b.Property<string>("IdCard")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("idCard")
                        .HasComment("身份证号")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password")
                        .HasComment("密码")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("sex")
                        .HasComment("性别")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("teacherName")
                        .HasComment("姓名")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("TeacherNo")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("teacherNo")
                        .HasComment("教师编号")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.Property<string>("Telphone")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasColumnName("telphone")
                        .HasComment("联系电话")
                        .UseCollation("utf8_general_ci")
                        .HasCharSet("utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeptId" }, "teacher_dept_id");

                    b.HasIndex(new[] { "Id" }, "teacher_id")
                        .IsUnique();

                    b.ToTable("tb_teacher");

                    b
                        .HasComment("教师表");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbChapter", b =>
                {
                    b.HasOne("ExamKing.Core.Entites.TbCourse", "courseIdNavigation")
                        .WithMany("TbChapters")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("chapter_course_id")
                        .IsRequired();

                    b.Navigation("courseIdNavigation");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbClass", b =>
                {
                    b.HasOne("ExamKing.Core.Entites.TbDept", "DeptIdNavigation")
                        .WithMany("TbClasses")
                        .HasForeignKey("DeptId")
                        .HasConstraintName("classes_dept_id")
                        .IsRequired();

                    b.Navigation("DeptIdNavigation");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbCourse", b =>
                {
                    b.HasOne("ExamKing.Core.Entites.TbDept", "DeptIdNavigation")
                        .WithMany("TbCourses")
                        .HasForeignKey("DeptId")
                        .HasConstraintName("course_dept_id")
                        .IsRequired();

                    b.HasOne("ExamKing.Core.Entites.TbTeacher", "teacherIdNavigation")
                        .WithMany("TbCourses")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("course_teacher_id")
                        .IsRequired();

                    b.Navigation("DeptIdNavigation");

                    b.Navigation("teacherIdNavigation");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbCourseclass", b =>
                {
                    b.HasOne("ExamKing.Core.Entites.TbClass", "classesIdNavigation")
                        .WithMany("TbCourseclasses")
                        .HasForeignKey("ClassesId")
                        .HasConstraintName("courseclasses_classes_idx")
                        .IsRequired();

                    b.HasOne("ExamKing.Core.Entites.TbCourse", "courseIdNavigation")
                        .WithMany("TbCourseclasses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("courseclasses_course_idx")
                        .IsRequired();

                    b.Navigation("classesIdNavigation");

                    b.Navigation("courseIdNavigation");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbExam", b =>
                {
                    b.HasOne("ExamKing.Core.Entites.TbCourse", "courseIdNavigation")
                        .WithMany("TbExams")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("exam_course_id")
                        .IsRequired();

                    b.HasOne("ExamKing.Core.Entites.TbTeacher", "teacherIdNavigation")
                        .WithMany("TbExams")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("exam_teacher_id")
                        .IsRequired();

                    b.Navigation("courseIdNavigation");

                    b.Navigation("teacherIdNavigation");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbExamclass", b =>
                {
                    b.HasOne("ExamKing.Core.Entites.TbClass", "classesIdNavigation")
                        .WithMany("TbExamclasses")
                        .HasForeignKey("ClassesId")
                        .HasConstraintName("examclasses_classes_idx")
                        .IsRequired();

                    b.HasOne("ExamKing.Core.Entites.TbExam", "examIdNavigation")
                        .WithMany("TbExamclasses")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("examclasses_exam_idx")
                        .IsRequired();

                    b.Navigation("classesIdNavigation");

                    b.Navigation("examIdNavigation");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbJudge", b =>
                {
                    b.HasOne("ExamKing.Core.Entites.TbChapter", "chapterIdNavigation")
                        .WithMany("TbJudges")
                        .HasForeignKey("ChapterId")
                        .HasConstraintName("judge_chapter_id")
                        .IsRequired();

                    b.HasOne("ExamKing.Core.Entites.TbCourse", "courseIdNavigation")
                        .WithMany("TbJudges")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("judge_source_id")
                        .IsRequired();

                    b.HasOne("ExamKing.Core.Entites.TbTeacher", "teacherIdNavigation")
                        .WithMany("TbJudges")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("judge_teacher_id")
                        .IsRequired();

                    b.Navigation("chapterIdNavigation");

                    b.Navigation("courseIdNavigation");

                    b.Navigation("teacherIdNavigation");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbSelect", b =>
                {
                    b.HasOne("ExamKing.Core.Entites.TbChapter", "Chapter")
                        .WithMany("TbSelects")
                        .HasForeignKey("ChapterId")
                        .HasConstraintName("select_chapter_id")
                        .IsRequired();

                    b.HasOne("ExamKing.Core.Entites.TbCourse", "Course")
                        .WithMany("TbSelects")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("select_source_id")
                        .IsRequired();

                    b.HasOne("ExamKing.Core.Entites.TbTeacher", "Teacher")
                        .WithMany("TbSelects")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("select_teacher_id")
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbStuanswerdetail", b =>
                {
                    b.HasOne("ExamKing.Core.Entites.TbExam", "examIdNavigation")
                        .WithMany("TbStuanswerdetails")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("answerdetail_exam_id")
                        .IsRequired();

                    b.HasOne("ExamKing.Core.Entites.TbQuestiontype", "QuesionTypeldNavigation")
                        .WithMany("TbStuanswerdetails")
                        .HasForeignKey("QuesionTypeld")
                        .HasConstraintName("answerdetail_quesiotype_id")
                        .IsRequired();

                    b.HasOne("ExamKing.Core.Entites.TbStudent", "stuIdNavigation")
                        .WithMany("TbStuanswerdetails")
                        .HasForeignKey("StuId")
                        .HasConstraintName("answerdetail_stu_id")
                        .IsRequired();

                    b.Navigation("examIdNavigation");

                    b.Navigation("QuesionTypeldNavigation");

                    b.Navigation("stuIdNavigation");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbStudent", b =>
                {
                    b.HasOne("ExamKing.Core.Entites.TbClass", "Classes")
                        .WithMany("TbStudents")
                        .HasForeignKey("ClassesId")
                        .HasConstraintName("student_classes_id")
                        .IsRequired();

                    b.HasOne("ExamKing.Core.Entites.TbDept", "Dept")
                        .WithMany("TbStudents")
                        .HasForeignKey("DeptId")
                        .HasConstraintName("student_dept_id")
                        .IsRequired();

                    b.Navigation("Classes");

                    b.Navigation("Dept");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbStuscore", b =>
                {
                    b.HasOne("ExamKing.Core.Entites.TbCourse", "Course")
                        .WithMany("TbStuscores")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("stuscore_course_id")
                        .IsRequired();

                    b.HasOne("ExamKing.Core.Entites.TbExam", "Exam")
                        .WithMany("TbStuscores")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("stuscore_exam_id")
                        .IsRequired();

                    b.HasOne("ExamKing.Core.Entites.TbStudent", "Stu")
                        .WithMany("TbStuscores")
                        .HasForeignKey("StuId")
                        .HasConstraintName("stuscore_stu_id")
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Exam");

                    b.Navigation("Stu");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbTeacher", b =>
                {
                    b.HasOne("ExamKing.Core.Entites.TbDept", "DeptIdNavigation")
                        .WithMany("TbTeachers")
                        .HasForeignKey("DeptId")
                        .HasConstraintName("teacher_dept_id")
                        .IsRequired();

                    b.Navigation("DeptIdNavigation");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbChapter", b =>
                {
                    b.Navigation("TbJudges");

                    b.Navigation("TbSelects");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbClass", b =>
                {
                    b.Navigation("TbCourseclasses");

                    b.Navigation("TbExamclasses");

                    b.Navigation("TbStudents");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbCourse", b =>
                {
                    b.Navigation("TbChapters");

                    b.Navigation("TbCourseclasses");

                    b.Navigation("TbExams");

                    b.Navigation("TbJudges");

                    b.Navigation("TbSelects");

                    b.Navigation("TbStuscores");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbDept", b =>
                {
                    b.Navigation("TbClasses");

                    b.Navigation("TbCourses");

                    b.Navigation("TbStudents");

                    b.Navigation("TbTeachers");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbExam", b =>
                {
                    b.Navigation("TbExamclasses");

                    b.Navigation("TbStuanswerdetails");

                    b.Navigation("TbStuscores");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbQuestiontype", b =>
                {
                    b.Navigation("TbStuanswerdetails");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbStudent", b =>
                {
                    b.Navigation("TbStuanswerdetails");

                    b.Navigation("TbStuscores");
                });

            modelBuilder.Entity("ExamKing.Core.Entites.TbTeacher", b =>
                {
                    b.Navigation("TbCourses");

                    b.Navigation("TbExams");

                    b.Navigation("TbJudges");

                    b.Navigation("TbSelects");
                });
#pragma warning restore 612, 618
        }
    }
}
